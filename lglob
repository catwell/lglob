#!/usr/bin/env lua
-- Like globals.lua in Lua 5.1.4 -- globalsplus.lua
-- Like globals.lua in Lua 5.1.4 but records fields in global tables too.
--
-- D.Manura, 2010-07
-- Steve Donovan, 2013
-- Public domain
--
-- See http://lua-users.org/wiki/DetectingUndefinedVariables

local append = table.insert
local lua52 = _VERSION:match '5%.2$'
local stderr = io.stderr

local usage = [[
usage: lglob [options]  <scripts>
    -t means "tolerant"; defined globals are ok (implies -g and -l)
    -g accept globals defined in a module
    -l call require() to track module exports
    -w <file>, whitelist file containing symbol={entries..},
        which are added to _G.
    -wx <file> an _exclusive_ whitelist, may be nil for none.
    -wl <file> whitelist used to resolve any require() calls
    -gl list global references with line numbers
    -gd generate locals for globals (e.g. 'local print=print')
    -d dump module contents in whitelist format
    -p <package> name to use for modules, if it is not explicit
    -x track local aliases to modules
    -luac <prog> set luac to use
    -dump diagnostic dump

    If globals.whitelist exists in same directly, use that implicitly.
    Unless tolerant, warn about altering known globals.
]]

local function quit (msg)
    if msg then stderr:write('lglob: ',msg,'\n') end
    print()
    print(usage)
    os.exit(1)
end

local function assertq (res,err)
    if not res then quit(err) end
    return res
end

local function exists (file)
    local f = io.open(file)
    if not f then
        return nil
    else
        f:close()
        return file
    end
end

local function contents (file)
    local f = io.open(file)
    local res = f:read '*a'
    f:close()
    return res
end

local function copy (src,dest)
    for k,v in pairs(src) do dest[k] = v end
    return dest
end

-- simple flag parser with filename globbing
local function glob (args)
    if #args == 1 and args[1]:match '[%*%?]' then
        -- no shell globbing, it's Windows :(
        local wildcard = args[1]
        table.remove(args,1)
        local f = io.popen('dir /b '..wildcard)
        local path = wildcard:match [[(.-\)[^\]+$]] or ''
        for line in f:lines() do
            append(args,path..line)
        end
        f:close()
    end
end

local function parse_args ()
    local takes_value, known_flags = {},{}
    for line in usage:gmatch '[^\n]+' do
        local flag,rest = line:match '^%s+%-(%S+)%s+(.*)'
        if flag then
            known_flags[flag] = true
            if rest:match '^<' then
                takes_value[flag] = true
            end
        end
    end
    local args = {}
    local i = 1
    while i <= #arg do
        local a,val = arg[i]
        local flag = a:match '^%-(.+)'
        if flag then
            if not known_flags[flag] then quit('-'..flag..' unknown flag') end
            -- grab the next argument if we need a value
            if takes_value[flag] and not val then
                i = i + 1
                if i > #arg then quit('-'..flag..' needs a value') end
                val = arg[i]
            end
            args[flag] = val or true
        else
            append(args,a)
        end
        i = i + 1
    end
    glob(args)
    return args
end

-- Lua 5.1/5.2 dofile with optional environment
local load = load
if not lua52 then
     function load(str,src,mode,env)
        local chunk,err = loadstring(str,src)
        if err then return nil,err end
        setfenv(chunk, env)
        return chunk
    end
end

local function evalfile (file,env)
    env = env or _G
    local chunk,err = load(contents(file),'tmp','t',env)
    if err then  return nil,err  end
    local ok,err = pcall(chunk)
    if not ok then return nil,err end
    return env
end

local function getnum (line)
    return tonumber(line:match '%((%d+)%)')
end

local dump

local function dumpt (t,name)
    if not dump then return end
    for _,item in ipairs(t) do
        if next(item) then
            io.write(name,': ')
            for k,v in pairs(item) do io.write(k,'=',tostring(v),'; ') end
            io.write '\n'
        end
    end
end

local yield = coroutine.yield
local locs,upvals,known_locals
local return_line

-- Parse local/upvalue information from luac -l -l
-- this information occurs _after_ dissembly listing for a function
-- so we also cache this listing and feed it to the analyzer later
local function fun_grabber(f)
    yield ''
    local line = true
    while line do -- forall functions
        line = f:read()
        if not line:match '^%a+ <' then
            print('bad line',line)
            os.exit()
        end
        line = f:read() -- params,slots,upvalues,locals, etc
        line = f:read()
        -- cache the disassembly
        local lines = {}
        while line:match '^%s+%d' do
            append(lines,line)
            line = f:read()
        end
        -- grab RETURN for module analysis
        if #lines > 1  and lines[#lines-1]:match 'RETURN' then
            return_line = lines[#lines-1]
        else
            return_line = lines[#lines]
        end
        while not line:match '^locals' do line = f:read() end
        locs = {}
        for i = 1,getnum(line) do
            line = f:read()
            local idx, name, istart, istop = line:match '%s+(%d+)%s+([%w_]+)%s+(%d+)%s+(%d+)'
            -- make the range include the instruction just before istart, because that's
            -- where it will often be initialized
            if istart then -- will fail for internal locals like (for index)
                append(locs,{idx=tonumber(idx),name=name,istart=tonumber(istart)-1,istop=tonumber(istop)})
            end
        end
        line = f:read()
        upvals = {}
        for i = 1,getnum(line) do
            line = f:read()
            local idx, name = line:match '%s+(%d+)%s+([%w_]+)'
            append(upvals,{idx=tonumber(idx),name=name})
        end
        dumpt(locs,'locs')
        dumpt(upvals,'upvals')
        line = f:read() -- blank line between functions
        for _,line in ipairs(lines) do
            yield(line)
        end
        yield ''
    end
    f:close()
    return nil
end

local function lwrapper (f)
    local fun = coroutine.wrap(fun_grabber)
    fun(f)

    -- make a file-like object
    local ff = {}
    function ff:read () return fun() end
    function ff:close () end

    -- extended peak-ahead
    function ff:get_return()
        return return_line
    end
    return ff
end

local locals = {}

function locals.match(slot,ip)
    if locs then
        for _,loc in ipairs(locs) do
            if loc.idx==slot and loc.istart <= ip and ip <= loc.istop then
                return loc
            end
        end
    end
end

function locals.add_known (loc)
    loc.known = true
    if not known_locals then known_locals = {} end
    append(known_locals,loc)
end

local function find (t,value,field)
    if t then
        for _,loc in ipairs(t) do
            if loc[field] == value then return loc end
        end
    end
end

function locals.match_known (name)
    return find(known_locals,name,'name')
end

function locals.match_upvalue (slot)
    return find(upvals,slot,'idx')
end

function locals.get_upvalue (data)
    local upv = locals.match_upvalue(data.argb)
    if upv and locals.match_known(upv.name) then
        return upv
    end
end

-- parsing dissembly output lines from luac
local function parse(line)
    local idx,linenum,opname,arga,argb,extra =
    line:match('^%s+(%d+)%s+%[(%d+)%]%s+(%w+)%s+([-%d]+)%s+([-%d]+)%s*(.*)')
    if idx then
        idx = tonumber(idx)
        linenum = tonumber(linenum)
        arga = tonumber(arga)
        argb = tonumber(argb)
    end
    local argc, const
    if extra then
        local extra2
        argc, extra2 = extra:match('^([-%d]+)%s*(.*)')
        if argc then argc = tonumber(argc); extra = extra2 end
    end
    if extra then
        const = extra:match('^; (.+)')
    end
    return {idx=idx,linenum=linenum,opname=opname,arga=arga,argb=argb,argc=argc,const=const}
end

local function stripq (const)
    return const and const:match('"(.-)"')
end

local function getname (const)
    if lua52 then
        local upv,name = const:match('(%S+)% (.+)')
        name = stripq(name)
        return name, upv ~= '_ENV'
    else
        return const
    end
end

local GETGLOB = lua52 and 'GETTABUP' or 'GETGLOBAL'
local SETGLOB = lua52 and 'SETTABUP' or 'SETGLOBAL'

local function getglobals(fh)
    local globals, requires, remarks = {},{},{}
    local last

    local function check_require ()
        local data = parse(fh:read())
        if data.opname == 'LOADK' then
            local name = stripq(data.const)
            data = parse(fh:read())
            -- we track module require (LOADK value) and local alias (loc.name) if any
            if data.opname == 'CALL' then
                local loc = locals.match(data.arga,data.idx)
                if loc then locals.add_known(loc) end
                append(requires,{linenum=last.linenum,name=loc and loc.name,alias=loc,module=name})
            end
        end
    end

    local function check_module ()
        local data = parse(fh:read())
        -- is this a 'strict' module or not? (Doesn't use package.seeall)
        if data.opname == 'LOADK' or data.opname == 'VARARG' then
            remarks.uses_module = true
            remarks.module_line = data.linenum
            remarks.module_name = stripq(data.const)
            data = parse(fh:read())
            if data.opname == 'CALL' then
                remarks.strict = true
            end
        end
    end

    local function global_ref (linenum,name,isset)
        if dump then print('ref',linenum,name,isset) end
        append(globals, {linenum=linenum,name=name,isset=isset})
    end

    -- was this upvalue a reference to a known local? (5.2)
    local function global_upvalue_ref52 (data,name,setting)
        local upv = locals.get_upvalue(data)
        if upv and name then
            global_ref(data.linenum,upv.name..'.'..name,false)
        end
    end

    local main_function = true
    local line = fh:read()

    -- if the main function returned a local, then we assume
    -- that local is the module
    if fh.get_return then
        local data = parse(fh:get_return())
        if data.argb == 2 then -- we _did_ actually return one value
            local loc = locals.match(data.arga,data.idx)
            if loc then
                locals.add_known(loc)
                remarks.simple_module = loc.name
            end
        end
    end

    while line do
        local data = parse(line)
        local opname = data.opname
        if opname == GETGLOB then
            local name,upv = getname(data.const)
            if name and not upv then -- global access
                data.gname = name
                last = data
                global_ref(last.linenum,name,false)
                if name == 'require' then -- collect requires for later loading
                    check_require()
                elseif name == 'module' then
                    check_module()
                end
            elseif upv then
                global_upvalue_ref52(data,name,false)
            end
         elseif opname == SETGLOB then
            local name,upv = getname(data.const)
            if name and not upv then -- global access
                global_ref(data.linenum,name,true)
            elseif upv then
                global_upvalue_ref52(data,name,true)
            end
        elseif opname == 'GETTABLE' or opname == 'SETTABLE' then
            local setting = data.opname=='SETTABLE'
            local reg = setting and 'arga' or 'argb'
            -- looking up in a previous global or upvalue table
            if last and data.const and last.gname
            and data.linenum==last.linenum --(data.idx-last.idx <= 2)
            and last.arga == data[reg] then
                local name = stripq(data.const)
                if name then
                    data.gname = last.gname .. '.' .. name
                    global_ref(last.linenum,data.gname,setting)
                    last = nil
                end
            else -- refering to a known require alias local directly
                local loc = locals.match(data[reg],data.idx)
                -- we want to put out 'global' references for known local module access.
                if loc and data.const and loc.known then
                    local name = stripq(data.const)
                    if name then
                        data.gname = loc.name .. '.' .. name
                        global_ref(data.linenum,data.gname,setting)
                    end
                end
            end
        elseif opname == 'GETUPVAL' then
            -- was this upvalue a reference to a known local? (5.1)
            local upv = locals.get_upvalue(data)
            if upv then
                data.gname = upv.name
                last = data -- will be followed by GETTABLE...
            end
        elseif next(data) == nil then -- end of function disassembly --
            last = nil
            main_function = false
        end
        line = fh:read()
    end
    return globals, requires, remarks
end

-- look up a possibly qualified name (like table.concat) in the whitelist t
-- If we fail, second return is true if we _did_ match the package.
local function rindex(t, name)
    local top,last_t,ok = t
    ok = t[name]
    if ok~=nil then return true end
    for part in name:gmatch('[%w_]+') do
        last_t = t
        ok,t = pcall(function() return t[part] end)
        if not ok or t == nil then return nil, last_t ~= top end
    end
    return t
end

local whitelist = _G
local globals_within_module, load_requires
local tolerant, extra_whitelist,require_whitelist = false, nil, nil
local luac, xlocal, pkg
local MODSCOPE = {}

local function process_file (file)
    local xflags = xlocal and ' -l ' or ''
    local inf = io.popen(luac..' -p -l '..xflags..file)
    local line = inf:read()
    if not line then -- we hit an error
        return
    end
    if xlocal then
        inf = lwrapper(inf)
    end
    local globals, requires, remarks = getglobals(inf)
    inf:close()
    return globals, requires, remarks
end

local function dump_globals (file,show_defs)
    local globals,requires,remarks = process_file(file)
    if not globals then return end
    local refs = {}
    for _,v in ipairs(globals) do
        local name = v.name
        if not refs[name] then refs[name] = {} end
        append(refs[name],v.linenum)
    end
    if not show_defs then -- just do a cross-reference dump for globals
        for name, ref in pairs(refs) do
            io.write(name,'\t')
            for _,lno in ipairs(ref) do io.write(lno,' ') end
            io.write '\n'
        end
    else -- separate globals into functions and tables
        local funs,tabs = {},{}
        local known = {require = true}
        if remarks.uses_module then
            known.module = true
        end
        for name in pairs(refs) do
            local ref = whitelist[name]
            if ref and not known[name] then
                if type(ref) == 'function' then append(funs, name)
                else append(tabs, name)
                end
            end
        end
        if #funs > 0 then
            local list = table.concat(funs,',')
            io.write('local ',list,' = ',list,'\n')
        end
        if #tabs > 0 then
            local list = table.concat(tabs,',')
            io.write('local ',list,' = ',list,'\n')
        end
    end
end

local function dump_requires (file)
    local _, requires = process_file(file)
    if not _ then return end
    for _,r in ipairs(requires) do
        print(r.module,r.name or '-')
    end
end

local function splitname (name)
    return name:match '^([^.]+)%.([^%.]+)$'
end

local function module_name (file)
    local basename = file:match '[^\\/]+$' -- filename bit
    return splitname(basename) -- strip extension
end

local last_pkg

local function dump_module (name,entries)
    local this_pkg
    if not name:match '%.'  then
        this_pkg = pkg
    else
        this_pkg,name = splitname(name)
    end
    if this_pkg and this_pkg ~= last_pkg then
        io.write(pkg,' = {}\n')
        last_pkg = this_pkg
    end
    local package = pkg and pkg..'.' or ''
    io.write(package,name,' = {','\n')
    for k,v in pairs(entries) do
        local pkg,name = splitname(v.name)
        name = name or v.name
        io.write('    ',name,' = ',v.linenum,',\n')
    end
    io.write '}\n'
    return true
end

local function check_globals (file, dump_entries)
    local ok = true
    local globals, requires, remarks = process_file(file)
    if not globals then return end -- failed, dammit!

    local old_globals_within_module = globals_within_module
    local old_whitelist,backed_up = whitelist

    local function backup_whitelist ()
        if not backed_up then
            whitelist = copy(whitelist,{})
            backed_up = true
        end
    end

    local function add_inner_globals (wl,refs)
        for _,v in ipairs(globals) do if v.isset then
            wl[v.name] = refs and v or MODSCOPE
        end end
    end

    if load_requires then -- any globals from require(mod) are ok
        for _,item in ipairs(requires) do
            if dump then print('requiring',item.module) end
            local ok,mod
            if require_whitelist then -- resolve module in this table
                local pkg,name = splitname(item.module)
                local base = require_whitelist
                if pkg then base = base[pkg] else name = item.module end
                mod = base[name]
                ok = mod ~= nil
            else -- actual direct loading of module!
                ok,mod = pcall(require,item.module)
            end
            if not ok then
                stderr:write('warning: could not require "',item.module,'"\n')
            elseif item.alias then -- set to a local; make it available
                backup_whitelist()
                whitelist[item.name] = mod
            end
        end
    end

    if remarks.simple_module then -- module not using module() or _ENV
        if dump then print('simple module:',remarks.simple_module) end
        local modname,modt,entries = remarks.simple_module,{},{}
        -- module goes into whitelist as a table containing all module exports
        backup_whitelist()
        whitelist[modname] = modt
        for _,v in ipairs(globals) do if v.isset then
            local name = v.name
            local mod,entry = splitname(name)
            if mod == modname then
                modt[entry] = MODSCOPE
                entries[entry] = v
            end
        end end
        if dump_entries then
            return dump_module(module_name(file),entries)
        end
    end

    local delayed_whitelist_clear
    if not tolerant and remarks.uses_module then
        if not dump_entries then
            if remarks.strict then -- just module(...) !
                delayed_whitelist_clear = remarks.module_line
            else -- module(package.seeall)
                globals_within_module = true
            end
        else
            local entries = {}
            local name = remarks.module_name or module_name(file)
            add_inner_globals(entries,true)
            return dump_module(name,entries)
        end
    end

    if globals_within_module then -- any global declares in file are ok
        backup_whitelist()
        add_inner_globals(whitelist)
    end

    table.sort(globals, function(a,b) return a.linenum < b.linenum end)

    for i,v in ipairs(globals) do
        -- with module(), environment changes after the call
        if delayed_whitelist_clear and v.linenum > delayed_whitelist_clear then
            backup_whitelist()
            whitelist = {}
            add_inner_globals(whitelist)
            delayed_whitelist_clear = nil
        end
        local found, found_root = rindex(whitelist, v.name)
        if not (tolerant or found == MODSCOPE) and (found or found_root) and v.isset then
            stderr:write('lglob: ',file,':',v.linenum,': redefining global ',v.name,'\n')
            ok = false
        elseif not found then
            stderr:write('lglob: ',file,':',v.linenum,': undefined ',v.isset and 'set' or 'get',' ',v.name,'\n')
            ok = false
        end
    end

    globals_within_module = old_globals_within_module
    whitelist = old_whitelist
    return ok
end

local args = parse_args()

if #args == 0 then quit 'must provide Lua files' end

luac = args.luac or 'luac'
dump = args.dump
xlocal = true --args.x
pkg = args.p

if args.wl then
    require_whitelist = assertq(evalfile(args.wl,{}))
end

if xlocal or args.wl then args.l = true end

tolerant = args.t
if tolerant then args.g = true; args.l = true end

globals_within_module = args.g
load_requires = args.l

if args.wx then
    if args.wx ~= 'nil' then args.w = args.wx end
    whitelist = {}
end

if args.w then
    extra_whitelist = assertq(evalfile(args.w,{}))
end

if exists('global.whitelist') then
    extra_whitelist = assertq(evalfile 'global.whitelist')
end

if extra_whitelist then copy(extra_whitelist,whitelist) end

local ok = true
for _,a in ipairs(args) do
    local res = true
    if #args > 1 then print('-- file '..a) end
    if args.gl or args.gd then
        dump_globals (a,args.gd)
    elseif args.rq then
        dump_requires (a)
    else
        res = check_globals (a, args.d)
    end
    ok = ok and res
end
os.exit(ok and 0 or 1)
